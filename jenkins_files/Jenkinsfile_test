pipeline {
      agent {
        label "final"
    }

    stages {
        stage('Git Clone') {
            steps {
                sh 'rm -rf *'
                withCredentials([usernamePassword(credentialsId: 'github2', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')
                ]) {
                    sh "git config --global credential.helper '!f() { echo username=$GITHUB_USERNAME; echo password=$GITHUB_PASSWORD; }; f'"
                    sh 'git clone https://github.com/sivanmarom/FlaskOps-Orchestrating-Flask-Applications-on-Kubernetes.git'
                }
            }
        }

        stage("Build User") {
            steps {
                wrap([$class: 'BuildUser', useGitAuthor: true]) {
                    script {
                        env.BUILD_USER = BUILD_USER
                    }
                }
            }
        }

        stage('Create S3 Bucket') {
            steps {
                dir('/home/ubuntu/workspace/testing/FlaskOps-Orchestrating-Flask-Applications-on-Kubernetes/terraform/s3') {
                    script {
                        sh 'terraform init'
                        sh 'terraform apply --auto-approve'
                        def flaskAppBucketName = sh(script: 'terraform output -raw flask_app_bucket_name', returnStdout: true).trim()
                        env.FLASK_APP_BUCKET_NAME = flaskAppBucketName                        
                    }
                }
            }
        }

        stage('Create Dynamodb Table') {
            steps {
                dir('/home/ubuntu/workspace/testing/FlaskOps-Orchestrating-Flask-Applications-on-Kubernetes/terraform/dynamodb') {
                    script{
                        sh 'terraform init'
                        sh 'terraform apply --auto-approve'
                        def flaskAppTableName = sh(script: 'terraform output -raw flask_app_table_name', returnStdout: true).trim()
                        env.FLASK_APP_TABLE_NAME = flaskAppTableName
                    }
                }
            }
        }

        stage('Build and Test Flask-App') {
            steps {
                dir('/home/ubuntu/workspace/testing/FlaskOps-Orchestrating-Flask-Applications-on-Kubernetes') {
                    sh "docker build -t flask_app_image:${image_name} ."
                    sh "docker run -it --name flask_app -p 5001:5001 -d flask_app_image:${image_name}"
                }
                dir('/home/ubuntu/workspace/testing/FlaskOps-Orchestrating-Flask-Applications-on-Kubernetes/tests'){
                    script{
                        sh 'pytest flask_test.py::Test_class --html=flask_report.html'
                        def log_entry_flask = sh(script: 'python3.8 parse_log_flask.py', returnStdout: true).trim()
                        def (timestamp, message) = log_entry_flask.split(',')
                        env.FLASK_TIMESTAMP = timestamp.trim()
                        env.FLASK_MESSAGE = message.trim().replaceAll('"', '\\"')             
                    }
                }
            }
        }

        stage('Upload Test to S3 Bucket') {
            steps {
                dir('/home/ubuntu/workspace/testing/FlaskOps-Orchestrating-Flask-Applications-on-Kubernetes/tests') {
                    withAWS(credentials: 'aws-credentials') {
                        sh "aws s3 cp flask_report.html s3://${env.FLASK_APP_BUCKET_NAME}"
                    }
                }
            }
        }

        stage('Upload Test to Dynamodb') {
            steps {
                dir('/home/ubuntu/workspace/testing/FlaskOps-Orchestrating-Flask-Applications-on-Kubernetes/tests') {
                    script {
                        withAWS(credentials: 'aws-credentials', region: 'us-west-2') {
                            sh "aws dynamodb put-item --table-name ${env.FLASK_APP_TABLE_NAME} --item \"{\\\"User\\\": {\\\"S\\\": \\\"${env.BUILD_USER}\\\"}, \\\"Timestamp\\\": {\\\"S\\\": \\\"${env.FLASK_TIMESTAMP}\\\"}, \\\"Message\\\": {\\\"S\\\": \\\"${env.FLASK_MESSAGE}\\\"}}\""
                        }
                    }
                }
            }
        }

        stage('Push Flask-App to Dockerhub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh "docker tag flask_app_image:${image_name} sivanmarom/flask_app:${image_name}"
                    sh "docker push sivanmarom/flask_app:${image_name}"
                }
            }
        }
    }
}

