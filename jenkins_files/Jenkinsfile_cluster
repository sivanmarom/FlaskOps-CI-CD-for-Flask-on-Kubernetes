pipeline {
      agent {
        label "final"
    }

    stages {

         stage('git clone') {
    steps {
        sh 'rm -rf *'
        withCredentials([
            usernamePassword(credentialsId: 'github2', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')
        ]) {
            sh "git config --global credential.helper '!f() { echo username=$GITHUB_USERNAME; echo password=$GITHUB_PASSWORD; }; f'"
            sh 'git clone https://github.com/sivanmarom/final_project.git'
        }
    }
}
        stage('create EKS clusters') {
            steps {
                dir('/home/ubuntu/workspace/cluster-launch/final_project/terraform/eks') {
                    script{
                        sh 'terraform init'
                        sh 'terraform apply --auto-approve'
                        def flaskClusterName = sh(returnStdout: true, script: 'terraform output -raw flask_cluster_name').trim()
                        def infraClusterName = sh(returnStdout: true, script: 'terraform output -raw infra_cluster_name').trim()
                        sh "eksctl utils write-kubeconfig --cluster=${flaskClusterName}"
                        sh "eksctl utils write-kubeconfig --cluster=${infraClusterName}"
                        sh 'kubectl get nodes'
                    }                   
                }
            }
        }
        stage('deploy infra-app'){
            steps{
                dir('/home/ubuntu/workspace/cluster-launch/final_project/k8s/mychart'){
                    sh 'kubectl apply -f namespace_infra.yaml'
                    
                }
                dir('/home/ubuntu/workspace/cluster-launch/final_project/k8s/mychart/templates'){
                    sh 'kubectl apply -f flask-app-deployment.yaml'
                    sh 'kubectl get all --namespace infra-space'
                }
            }
        }
    
    }
}

